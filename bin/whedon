#!/usr/bin/env ruby
require_relative "../lib/whedon"
require 'thor'

class WhedonCli < Thor
  desc "reviews", "Lists open reviews"
  def reviews
    Whedon::Paper.list
  end

  desc "open", "Open browser for review"
  def open(issue_id)
    `open https://github.com/#{ENV['JOSS_REVIEW_REPO']}/issues/#{issue_id}`
  end

  desc "verify", "Check the key values in the review issue"
  def verify(issue_id)
    Whedon::Paper.new(issue_id).audit
  end

  desc "download", "Download the repo"
  def download(issue_id)
    Whedon::Paper.new(issue_id).download
  end

  desc "prepare", "Just prepare the PDF"
  def prepare(issue_id)
    review = Whedon::Review.new(issue_id)
    processor = Whedon::Processor.new(issue_id, review.issue_body)
    processor.archive_doi = 'PENDING'

    paper_paths = processor.find_paper_paths

    if paper_paths.empty?
      puts "Can't find any papers to compile :-("
    elsif paper_paths.size == 1
      puts "Setting paper_path to #{paper_paths.first}"
      processor.paper_path = paper_paths.first
      processor.generate_pdf
    else
      puts "Looks like we found more than one possible paper:"
      paper_paths.each_with_index { |path, index| puts "#{index+1}. #{path}"}
      selected_paper = ask("Pick which paper you want:")
      paper_path = paper_paths[selected_paper.to_i - 1]
      puts "Setting paper_path to #{paper_paths}"
      processor.paper_path = paper_path
      processor.generate_pdf
    end
  end

  desc "compile", "Compile the paper and XML metadata"
  def compile(issue_id)
    review = Whedon::Review.new(issue_id)
    processor = Whedon::Processor.new(issue_id, review.issue_body)

    paper_paths = processor.find_paper_paths

    if paper_paths.empty?
      puts "Can't find any papers to compile :-("
    elsif paper_paths.size == 1
      puts "Setting paper_path to #{paper_paths.first}"
      processor.paper_path = paper_paths.first
      processor.compile
    else
      puts "Looks like we found more than one possible paper:"
      paper_paths.each_with_index { |path, index| puts "#{index+1}. #{path}"}
      selected_paper = ask("Pick which paper you want:")
      paper_path = paper_paths[selected_paper.to_i - 1]
      puts "Setting paper_path to #{paper_paths}"
      processor.paper_path = paper_path
      processor.compile
    end
  end

  desc "crossref", "Generate Crossref metadata"
  def crossref(issue_id)
    paper = Whedon::Paper.new(issue_id)
    review = Whedon::Review.new(issue_id)
    processor = Whedon::Processor.new(issue_id, review.issue_body)

    xml_paths = processor.find_xml_paths
    if xml_paths.empty?
      puts "Can't find any XML document to compile with :-("
    elsif xml_paths.size == 1
      puts "Setting xml_path to #{xml_paths.first}"
      processor.xml_path = xml_paths.first
    else
      puts "Looks like we found more than one possible XML document:"
      xml_paths.each_with_index { |path, index| puts "#{index+1}. #{path}"}
      selected_xml = ask("Pick which paper you want:")
      xml_path = xml_paths[selected_xml.to_i - 1]
      puts "Setting xml_path to #{xml_path}"
      processor.xml_path = xml_path
    end

    processor.generate_crossref
  end
end

WhedonCli.start
